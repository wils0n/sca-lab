# Pipeline simple para an√°lisis SCA
stages:
  - security-scan

variables:
  REPORTS_DIR: "security-reports"

before_script:
  - mkdir -p $REPORTS_DIR

# Template para artefactos
.artifacts_template: &artifacts_template
  artifacts:
    paths:
      - $REPORTS_DIR/
    expire_in: 1 week
    when: always

# An√°lisis con Trivy
trivy-scan:
  stage: security-scan
  image: aquasec/trivy:latest
  <<: *artifacts_template
  script:
    - echo "üîç Ejecutando an√°lisis Trivy..."

    # Actualizar base de datos
    - trivy image --download-db-only

    # An√°lisis del c√≥digo fuente
    - |
      trivy fs . \
        --format json \
        --output $REPORTS_DIR/trivy-report.json \
        --severity HIGH,CRITICAL

    # Reporte en tabla para visualizar
    - |
      trivy fs . \
        --format table \
        --output $REPORTS_DIR/trivy-table.txt \
        --severity HIGH,CRITICAL

    # Generar SBOM
    - |
      trivy fs . \
        --format cyclonedx \
        --output $REPORTS_DIR/sbom.json

    # Mostrar resumen
    - echo "üìä Resumen del an√°lisis:"
    - cat $REPORTS_DIR/trivy-table.txt

    # Verificar vulnerabilidades cr√≠ticas
    - |
      CRITICAL=$(cat $REPORTS_DIR/trivy-report.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length')
      echo "üö® Vulnerabilidades cr√≠ticas encontradas: $CRITICAL"

      if [ "$CRITICAL" -gt 0 ]; then
        echo "‚ùå Se encontraron vulnerabilidades cr√≠ticas"
        exit 1
      fi

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH