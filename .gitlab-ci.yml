# Pipeline simple para an√°lisis SCA
stages:
  - security-scan
  - security-consolidation

variables:
  REPORTS_DIR: "security-reports"
  # Configurar umbrales de seguridad
  MAX_CRITICAL: "0"    # M√°ximo de vulnerabilidades cr√≠ticas permitidas
  MAX_HIGH: "5"        # M√°ximo de vulnerabilidades altas permitidas

before_script:
  - mkdir -p $REPORTS_DIR

# Template para artefactos mejorado
.artifacts_template: &artifacts_template
  artifacts:
    paths:
      - $REPORTS_DIR/
    reports:
      # Para integraci√≥n con GitLab Security Dashboard
      sast: $REPORTS_DIR/gl-sast-report.json
      dependency_scanning: $REPORTS_DIR/gl-dependency-scanning-report.json
    expire_in: 30 days
    when: always
    expose_as: "Security Analysis Reports"
    
# An√°lisis con Trivy 
trivy-scan:
  stage: security-scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  <<: *artifacts_template
  before_script:
    - mkdir -p $REPORTS_DIR
    - apk add --no-cache jq curl
  script:
    - echo "üîç Ejecutando an√°lisis Trivy..."
    - trivy image --download-db-only

    # An√°lisis principal
    - |
      trivy filesystem . \
        --format json \
        --output $REPORTS_DIR/trivy-report.json \
        --severity HIGH,CRITICAL

    # Generar reporte compatible con GitLab Security
    - |
      trivy filesystem . \
        --format template \
        --template '@contrib/gitlab.tpl' \
        --output $REPORTS_DIR/gl-dependency-scanning-report.json \
        --severity HIGH,CRITICAL || echo "Template GitLab no disponible"

    # Reporte en tabla
    - |
      trivy filesystem . \
        --format table \
        --output $REPORTS_DIR/trivy-table.txt \
        --severity HIGH,CRITICAL

    # Generar SBOM
    - |
      trivy filesystem . \
        --format cyclonedx \
        --output $REPORTS_DIR/sbom.json

    # Crear reporte HTML para visualizaci√≥n
    - |
      trivy filesystem . \
        --format template \
        --template '@contrib/html.tpl' \
        --output $REPORTS_DIR/trivy-report.html \
        --severity HIGH,CRITICAL || echo "Template HTML no disponible"

    # Mostrar resumen
    - echo "üìä Resumen del an√°lisis:"
    - cat $REPORTS_DIR/trivy-table.txt

    # Generar estad√≠sticas detalladas y EVALUAR FALLO
    - |
      if [ -f "$REPORTS_DIR/trivy-report.json" ] && [ -s "$REPORTS_DIR/trivy-report.json" ]; then
        CRITICAL=$(cat $REPORTS_DIR/trivy-report.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' 2>/dev/null || echo "0")
        HIGH=$(cat $REPORTS_DIR/trivy-report.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' 2>/dev/null || echo "0")
        MEDIUM=$(cat $REPORTS_DIR/trivy-report.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' 2>/dev/null || echo "0")
        
        echo "üö® Vulnerabilidades cr√≠ticas encontradas: $CRITICAL (m√°x permitido: $MAX_CRITICAL)"
        echo "‚ö†Ô∏è  Vulnerabilidades altas encontradas: $HIGH (m√°x permitido: $MAX_HIGH)"
        echo "üìã Vulnerabilidades medias encontradas: $MEDIUM"
        
        # Crear reporte detallado
        {
          echo "# Reporte de An√°lisis de Seguridad - $(date)"
          echo "## Resumen Ejecutivo"
          echo "- **Cr√≠ticas:** $CRITICAL (l√≠mite: $MAX_CRITICAL)"
          echo "- **Altas:** $HIGH (l√≠mite: $MAX_HIGH)" 
          echo "- **Medias:** $MEDIUM"
          echo ""
          echo "## Distribuci√≥n por Proyecto"
          echo "### Java (pom.xml)"
          echo "Vulnerabilidades: $(cat $REPORTS_DIR/trivy-report.json | jq '[.Results[] | select(.Target | contains("pom.xml")).Vulnerabilities[]?] | length' 2>/dev/null || echo "0")"
          echo ""
          echo "### Node.js (package-lock.json)"  
          echo "Vulnerabilidades: $(cat $REPORTS_DIR/trivy-report.json | jq '[.Results[] | select(.Target | contains("package-lock.json")).Vulnerabilities[]?] | length' 2>/dev/null || echo "0")"
          echo ""
          echo "## Detalle de Vulnerabilidades Cr√≠ticas"
          cat $REPORTS_DIR/trivy-report.json | jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | "- **\(.VulnerabilityID)**: \(.Title) (CVSS: \(.CVSS.nvd.V3Score // "N/A"))"' 2>/dev/null || echo "No se pudieron extraer detalles"
        } > $REPORTS_DIR/executive-summary.md
        
        cat $REPORTS_DIR/executive-summary.md
        
        # Generar m√©tricas para badges
        echo "CRITICAL_COUNT=$CRITICAL" > $REPORTS_DIR/metrics.env
        echo "HIGH_COUNT=$HIGH" >> $REPORTS_DIR/metrics.env
        echo "TOTAL_COUNT=$((CRITICAL + HIGH))" >> $REPORTS_DIR/metrics.env
        
        # ‚ö†Ô∏è EVALUACI√ìN DE POL√çTICA DE SEGURIDAD ‚ö†Ô∏è
        FAIL_PIPELINE=0
        
        if [ "$CRITICAL" -gt "$MAX_CRITICAL" ]; then
          echo "‚ùå FALLO: Se encontraron $CRITICAL vulnerabilidades cr√≠ticas (m√°ximo permitido: $MAX_CRITICAL)"
          FAIL_PIPELINE=1
        fi
        
        if [ "$HIGH" -gt "$MAX_HIGH" ]; then
          echo "‚ùå FALLO: Se encontraron $HIGH vulnerabilidades altas (m√°ximo permitido: $MAX_HIGH)"
          FAIL_PIPELINE=1
        fi
        
        if [ "$FAIL_PIPELINE" -eq 1 ]; then
          echo ""
          echo "üö´ PIPELINE FALLIDO POR POL√çTICA DE SEGURIDAD"
          echo "üìã Debes corregir las vulnerabilidades antes de continuar"
          exit 1
        else
          echo "‚úÖ Pipeline aprobado - vulnerabilidades dentro de l√≠mites aceptables"
        fi
        
      else
        echo "‚ö†Ô∏è  No se pudo procesar el archivo JSON o est√° vac√≠o"
        echo "‚ùå FALLO: Error procesando resultados de seguridad"
        exit 1
      fi

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH